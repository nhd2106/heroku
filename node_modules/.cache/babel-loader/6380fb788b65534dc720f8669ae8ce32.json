{"ast":null,"code":"import _objectSpread from \"c:\\\\Users\\\\ngohu\\\\Desktop\\\\hoc-renderprops-15122019\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"c:\\\\Users\\\\ngohu\\\\Desktop\\\\hoc-renderprops-15122019\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"c:\\\\Users\\\\ngohu\\\\Desktop\\\\hoc-renderprops-15122019\\\\src\\\\Hooks\\\\DemoHooks.js\";\nimport React, { useState, useEffect } from \"react\";\nimport useCounter from \"./useCounter\";\nimport useForm from \"./useForm\"; // Validation của form nào thì form đó tự viết\n// LoginForm có 2 field là username và password\n\nexport const validation = values => {\n  let errors = {};\n\n  if (!values.username) {\n    errors.username = \"Không được để trống\";\n  }\n\n  if (!values.password) {\n    errors.password = \"Không được để trống\";\n  } // Validate min user name\n\n\n  if (values.username.length < 5) {\n    errors.username = \"Độ đài ít nhất 3 kí tự\";\n  } // Validate max user name\n\n\n  if (values.username.length > 15) {\n    errors.username = \"Độ đài tối đa 15 kí tự\";\n  }\n\n  return errors;\n};\nexport const DemoHooks = () => {\n  // useState nhận trả về 1 array 2 tham số\n  // tham số đầu tiên là giá trị của state\n  // tham số thứ 2 là một hàm dùng để thay đổi state\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        count = _useState2[0],\n        setCount = _useState2[1];\n\n  const _useState3 = useState({\n    firstName: \"\",\n    lastName: \"\"\n  }),\n        _useState4 = _slicedToArray(_useState3, 2),\n        name = _useState4[0],\n        setName = _useState4[1]; // Sử dụng custom hooks useCounter\n\n\n  const _useCounter = useCounter(0),\n        _useCounter2 = _slicedToArray(_useCounter, 3),\n        number = _useCounter2[0],\n        inc = _useCounter2[1],\n        desc = _useCounter2[2]; // Sử dụng custom hooks useForm\n\n\n  const _useForm = useForm({\n    values: {\n      username: \"\",\n      password: \"\"\n    },\n    errors: {\n      username: \"\",\n      password: \"\"\n    }\n  }, validation),\n        _useForm2 = _slicedToArray(_useForm, 3),\n        loginForm = _useForm2[0],\n        handleChangeLoginForm = _useForm2[1],\n        handleBlurLoginForm = _useForm2[2]; // useEffect chạy sau khi state thay đổi và render lại\n  // Nó nhận vào 2 tham số\n  // 1: hàm callback để xử lý\n  // 2: 1 array các tham số mà nó sẽ so sánh để quyết định xem có chạy useEffect sau khi render lại hay không\n  // Hàm useEffect này chỉ được chạy khi count thay đổi\n\n\n  useEffect(() => {\n    console.log(\"count sau khi render\", count);\n  }, [count]); // Hàm useEffect này chỉ được chạy khi name thay đổi\n\n  useEffect(() => {\n    console.log(\"name sau khi render\", name);\n  }, [name]); // array không tham số useEffect chỉ chạy 1 lần duy nhất => tương ứng với componentDidMount\n\n  useEffect(() => {\n    console.log(\"render 1 lần duy nhất\");\n  }, []); // Không có tham số thứ 2, useEffect này sẽ chạy mỗi khi render lại\n\n  useEffect(() => {\n    // Không gọi API trong đây\n    console.log(\"render lại mỗi khi state hoặc props thay đổi\");\n  }); // useEffect và useState phải khai báo ở trên đầu component\n  // Không được sử dụng trong if else hay vòng for\n\n  const handleChange = evt => {\n    // const [name, value] = evt.target;\n    setName(_objectSpread({}, name, {\n      [evt.target.name]: evt.target.value\n    }));\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    name: \"username\",\n    value: loginForm.values.username,\n    onChange: handleChangeLoginForm,\n    onBlur: handleBlurLoginForm,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }), loginForm.errors.username && React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, loginForm.errors.username), React.createElement(\"input\", {\n    type: \"text\",\n    name: \"password\",\n    value: loginForm.values.password,\n    onChange: handleChangeLoginForm,\n    onBlur: handleBlurLoginForm,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }), loginForm.errors.password && React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, loginForm.errors.password));\n};\nexport const HooksChild = () => {\n  useEffect(() => {\n    let timeOut = setTimeout(() => {\n      console.log(\"Render sau 1s\");\n    }, 1000);\n    console.log(\"HooksChild Render\");\n    return () => {\n      // Tương ứng với componentWillUnmount\n      // Sẽ chạy khi component bị xoá khỏi DOM\n      // Trong này ta thường sẽ xử lý clearTimeout, removeEvenlistener,...\n      console.log(\"HooksChild Unmount\");\n      clearTimeout(timeOut);\n    };\n  });\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, \"Hello\");\n};","map":{"version":3,"sources":["c:/Users/ngohu/Desktop/hoc-renderprops-15122019/src/Hooks/DemoHooks.js"],"names":["React","useState","useEffect","useCounter","useForm","validation","values","errors","username","password","length","DemoHooks","count","setCount","firstName","lastName","name","setName","number","inc","desc","loginForm","handleChangeLoginForm","handleBlurLoginForm","console","log","handleChange","evt","target","value","HooksChild","timeOut","setTimeout","clearTimeout"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport useCounter from \"./useCounter\";\nimport useForm from \"./useForm\";\n\n// Validation của form nào thì form đó tự viết\n// LoginForm có 2 field là username và password\nexport const validation = values => {\n  let errors = {};\n  if (!values.username) {\n    errors.username = \"Không được để trống\";\n  }\n  if (!values.password) {\n    errors.password = \"Không được để trống\";\n  }\n  // Validate min user name\n  if (values.username.length < 5) {\n    errors.username = \"Độ đài ít nhất 3 kí tự\";\n  }\n  // Validate max user name\n  if (values.username.length > 15) {\n    errors.username = \"Độ đài tối đa 15 kí tự\";\n  }\n\n  return errors;\n};\n\nexport const DemoHooks = () => {\n  // useState nhận trả về 1 array 2 tham số\n  // tham số đầu tiên là giá trị của state\n  // tham số thứ 2 là một hàm dùng để thay đổi state\n  const [count, setCount] = useState(0);\n  const [name, setName] = useState({\n    firstName: \"\",\n    lastName: \"\"\n  });\n\n  // Sử dụng custom hooks useCounter\n  const [number, inc, desc] = useCounter(0);\n  // Sử dụng custom hooks useForm\n  const [loginForm, handleChangeLoginForm, handleBlurLoginForm] = useForm(\n    {\n      values: {\n        username: \"\",\n        password: \"\"\n      },\n      errors: {\n        username: \"\",\n        password: \"\"\n      }\n    },\n    validation\n  );\n\n  // useEffect chạy sau khi state thay đổi và render lại\n  // Nó nhận vào 2 tham số\n  // 1: hàm callback để xử lý\n  // 2: 1 array các tham số mà nó sẽ so sánh để quyết định xem có chạy useEffect sau khi render lại hay không\n  // Hàm useEffect này chỉ được chạy khi count thay đổi\n  useEffect(() => {\n    console.log(\"count sau khi render\", count);\n  }, [count]);\n\n  // Hàm useEffect này chỉ được chạy khi name thay đổi\n  useEffect(() => {\n    console.log(\"name sau khi render\", name);\n  }, [name]);\n\n  // array không tham số useEffect chỉ chạy 1 lần duy nhất => tương ứng với componentDidMount\n  useEffect(() => {\n    console.log(\"render 1 lần duy nhất\");\n  }, []);\n\n  // Không có tham số thứ 2, useEffect này sẽ chạy mỗi khi render lại\n  useEffect(() => {\n    // Không gọi API trong đây\n    console.log(\"render lại mỗi khi state hoặc props thay đổi\");\n  });\n\n  // useEffect và useState phải khai báo ở trên đầu component\n  // Không được sử dụng trong if else hay vòng for\n\n  const handleChange = evt => {\n    // const [name, value] = evt.target;\n    setName({ ...name, [evt.target.name]: evt.target.value });\n  };\n\n  return (\n    <div>\n      {/* <h1>Demo Hooks</h1>\n      <p>{count}</p>\n      <button onClick={() => setCount(count + 1)}>Cộng</button> */}\n      {/* {count % 2 === 0 && <HooksChild />} */}\n      {/* <input\n        type=\"text\"\n        name=\"firstName\"\n        value={name.firstName}\n        onChange={handleChange}\n      />\n      <input\n        type=\"text\"\n        name=\"lastName\"\n        value={name.lastName}\n        onChange={handleChange}\n      /> */}\n\n      {/* useCounter */}\n      {/* <p>{number}</p>\n      <button onClick={inc}>Tăng</button>\n      <button onClick={desc}>Giảm</button> */}\n\n      {/* useForm */}\n      <input\n        type=\"text\"\n        name=\"username\"\n        value={loginForm.values.username}\n        onChange={handleChangeLoginForm}\n        onBlur={handleBlurLoginForm}\n      />\n      {loginForm.errors.username && <p>{loginForm.errors.username}</p>}\n      <input\n        type=\"text\"\n        name=\"password\"\n        value={loginForm.values.password}\n        onChange={handleChangeLoginForm}\n        onBlur={handleBlurLoginForm}\n      />\n      {loginForm.errors.password && <p>{loginForm.errors.password}</p>}\n    </div>\n  );\n};\n\nexport const HooksChild = () => {\n  useEffect(() => {\n    let timeOut = setTimeout(() => {\n      console.log(\"Render sau 1s\");\n    }, 1000);\n    console.log(\"HooksChild Render\");\n    return () => {\n      // Tương ứng với componentWillUnmount\n      // Sẽ chạy khi component bị xoá khỏi DOM\n      // Trong này ta thường sẽ xử lý clearTimeout, removeEvenlistener,...\n      console.log(\"HooksChild Unmount\");\n      clearTimeout(timeOut);\n    };\n  });\n  return <div>Hello</div>;\n};\n"]},"metadata":{},"sourceType":"module"}